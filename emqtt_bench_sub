#! /usr/bin/env escript
%% -*- erlang -*-
%%! -pa ./ebin -pa deps/emqttc/ebin -pa deps/getopt/ebin -pa deps/gen_logger/ebin -pa deps/goldrush/ebin -smp true +K true +A 16 +P 200000 -env ERL_MAX_PORTS 100000 -env ERTS_MAX_PORTS 100000

-define(OPTS, [
         {help, undefined, "help", boolean,
          "help information"},
         {host, $h, "host", {string, "localhost"},
          "mqtt server hostname or IP address"},
         {port, $p, "port", {integer, 1883},
          "mqtt server port number"},
         {count, $c, "count", {integer, 200},
          "max count of clients"},
         {startnumber, $n, "startnumber", {integer, 0}, "start number"},
         {interval, $i, "interval", {integer, 10},
          "interval of connecting to the broker"},
         {topic, $t, "topic", string,
          "topic subscribe, support %u, %c, %i variables"},
         {qos, $q, "qos", {integer, 0},
          "subscribe qos"},
         {username, $u, "username", string,
          "username for connecting to server"},
         {password, $P, "password", string,
          "password for connecting to server"},
         {keepalive, $k, "keepalive", {integer, 300},
          "keep alive in seconds"},
         {clean, $C, "clean", {boolean, true},
          "clean session"},
         {ssl, $S, "ssl", {boolean, false},
          "ssl socoket for connecting to server"},
         {certfile, undefined, "certfile", string,
          "client certificate for authentication, if required by server"},
         {keyfile, undefined, "keyfile", string,
          "client private key for authentication, if required by server"},
         {ifaddr, undefined, "ifaddr", string,
          "local ipaddress or interface address"}
        ]).

main(Argv) ->
    {ok, {Opts, _Args}} = getopt:parse(?OPTS, Argv),
    case proplists:get_value(help, Opts) of
        true ->
            usage(),
            halt(0);
        _ ->
            ok
    end,
    require([count, topic], Opts),
    emqtt_benchmark:main(sub, Opts).

require(Keys, Opts) ->
    lists:foreach(fun(Opt) ->
        case lists:keyfind(Opt, 1, Opts) of
            false ->
                io:format("Error: '~s' required~n", [Opt]),
                usage(),
                halt(1);
            _     ->
                ok
        end
    end, Keys).

usage() ->
    ScriptPath = escript:script_name(),
    Script = filename:basename(ScriptPath),
    getopt:usage(?OPTS, Script).

